package com.tmz.ian.activity;import android.app.Dialog;import android.app.ProgressDialog;import android.app.SearchManager;import android.content.Context;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.ExpandableListView;import android.widget.SearchView;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.VolleyError;import com.tmz.ian.R;import com.tmz.ian.adapters.ExpandListAdapter;import com.tmz.ian.fragment.FavoriteListFragment;import com.tmz.ian.model.Child;import com.tmz.ian.model.Group;import com.tmz.ian.util.Constants;import com.tmz.ian.util.SharedPreferencesManager;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;public class MainActivity extends BaseActivity implements ExpandableListView.OnChildClickListener,ExpandableListView.OnGroupClickListener{    DrawerLayout mDrawerLayout;    //   NavigationView mNavigationView;    FragmentManager mFragmentManager;    FragmentTransaction mFragmentTransaction;    ExpandableListView drawerList;    private ArrayList<Group> expListItems;    private ProgressDialog dialog;    private Context mContext;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mContext = this;        /**         *Setup the DrawerLayout and NavigationView         */        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);        drawerList = (ExpandableListView) findViewById(R.id.left_drawer);        expListItems = setStandardGroups();        drawerList.setAdapter(new ExpandListAdapter(this,expListItems));        mFragmentManager = getSupportFragmentManager();        mFragmentTransaction = mFragmentManager.beginTransaction();        mFragmentTransaction.replace(R.id.containerView,new FavoriteListFragment()).commit();        Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.my_toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setHomeButtonEnabled(true);        ActionBarDrawerToggle mDrawerToggle = new ActionBarDrawerToggle(this,mDrawerLayout, toolbar,R.string.app_name,                R.string.app_name);        mDrawerLayout.setDrawerListener(mDrawerToggle);        mDrawerToggle.syncState();        drawerList.setOnGroupClickListener(this);        drawerList.setOnChildClickListener(this);    }    /*    Expandable Drawer Child items CLick     */    @Override    public boolean onChildClick(ExpandableListView parent, View v,                                int groupPosition, int childPosition, long id) {        Child child = (Child) v.getTag();        boolean click = true;        if (groupPosition == 0)        {            if (child.getName().equalsIgnoreCase("Favourite") && click) {                //loadJsonData(Request.Method.GET,Constants.DEALSLIST + "Favourite", null, Constants.DEALSLIST,false);                mFragmentTransaction = mFragmentManager.beginTransaction();                mFragmentTransaction.replace(R.id.containerView, new FavoriteListFragment()).commit();                mDrawerLayout.closeDrawers();                click = false;            }        }        Log.v("result::",child.getName());        return true;    }    /*       Setting data for drawer     */    public ArrayList<Group> setStandardGroups() {        String group_names[] = getResources().getStringArray(R.array.expandable_heading);        String deals_steps[] = getResources().getStringArray(R.array.deals);        int group_images[] = { R.drawable.ic_launcher, R.drawable.ic_launcher,                R.drawable.ic_launcher, R.drawable.ic_launcher, R.drawable.ic_launcher, R.drawable.ic_launcher};        ArrayList<Group> list = new ArrayList<Group>();        ArrayList<Child> ch_list;        // int size = 4;        int j = 0;        int i = 0;        for (String group_name : group_names) {            Group gru = new Group();            gru.setName(group_name);            gru.setImage(group_images[i]);            ch_list = new ArrayList<Child>();            if(i==0) {                for (; j < deals_steps.length; j++) {                    Child ch = new Child();                    ch.setName(deals_steps[j]);                    ch_list.add(ch);                }                gru.setItems(ch_list);            }            // size = size + 4;            i++;            list.add(gru);        }        return list;    }    /*       Expandable Drawer Group items CLick        */    @Override    public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {        Group group = (Group) v.getTag();        if(group.getName().equalsIgnoreCase("Logout"))        {            loadJsonData(Request.Method.GET,Constants.LOGOUT, null, Constants.LOGOUT,false);            mDrawerLayout.closeDrawers();        }        if(group.getName().equalsIgnoreCase("Change Password"))        {            //mFragmentTransaction = mFragmentManager.beginTransaction();            // mFragmentTransaction.replace(R.id.containerView, new ChangePasswordFragment()).commit();            mDrawerLayout.closeDrawers();            showChangePasswordDialog(mContext);            // mFragmentTransaction.replace(R.id.containerView,new ChangePasswordFragment()).commit();        }        return false;    }    public void showChangePasswordDialog(Context activity){        final Dialog dialog = new Dialog(activity);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setCancelable(false);        dialog.setContentView(R.layout.change_password_dialog);        final EditText mOldPassword = (EditText) dialog.findViewById(R.id.oldpasswordText);        final EditText mNewPassword = (EditText) dialog.findViewById(R.id.newpasswordTextView);        final EditText mConfirmPassword = (EditText) dialog.findViewById(R.id.confirmpasswordTextView);        // text.setText(msg);        Button dialogCancelButton = (Button) dialog.findViewById(R.id.cancelBtn);        dialogCancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        Button dialogButton = (Button) dialog.findViewById(R.id.chnageBtn);        dialogButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String Newpassword = mNewPassword.getText().toString();                final String ConfirmPassword = mConfirmPassword.getText().toString();                final String OldPassword = mOldPassword.getText().toString();                if(OldPassword.isEmpty()) {                    mOldPassword.setError("Enter old password");                }if (Newpassword.isEmpty()){                    mNewPassword.setError("Enter New Password");                }if(ConfirmPassword.isEmpty()){                    mConfirmPassword.setError("Enter Confirm Passwortd");                }if (Newpassword.equals(OldPassword)){                    mNewPassword.setError("Old password and New password Should differ");                }if(!Newpassword.equals(ConfirmPassword)){                    mConfirmPassword.setError("password donot match");                }                else {                    // Show a progress spinner, and kick off a background task to                    // perform the user login attempt.                    // showProgress(true);                    JSONObject loginJsonObj = null;                    try {                        loginJsonObj =  new JSONObject();                        loginJsonObj.put("oldPassword",OldPassword);                        loginJsonObj.put("newPassword",Newpassword);                    } catch (Exception ex) {                    }                    //String appendData = "?"+id+ = "1"+""                    loadJsonData(Constants.CHANGEPASSWORD, loginJsonObj.toString(), Constants.CHANGEPASSWORD);                    Log.i("password", "**********");                    dialog.dismiss();           /* mAuthTask = new UserLoginTask(email, password);            mAuthTask.execute((Void) null);*/                }            }        });        dialog.show();    }    public void showDialog() {        dialog = new ProgressDialog(this);        dialog.setMessage("Please wait...");        dialog.setCancelable(true);        dialog.show();    }    public void hideDialog() {        if (dialog != null && dialog.isShowing()) {            dialog.dismiss();        }    }    @Override    protected String getTagName() {        return null;    }    @Override    public void showProgress(boolean show, String tag) {        if (show) {            showDialog();        } else            hideDialog();    }    @Override    public void onSuccess(JSONObject response, String tag) {        if(tag.equals(Constants.LOGOUT))        {            if(response != null)            {                int status =  response.optInt("status");                String message =  response.optString("message");                Toast.makeText(this,message,Toast.LENGTH_LONG).show();                Log.v("result deals::",response.toString());                if(status == 200)                {                    SharedPreferencesManager.removePreference(Constants.TOKEN);                    Intent mainActivityInt = new Intent(this,LoginActivity.class);                    startActivity(mainActivityInt);                    finish();                }            }            //String token = SharedPreferencesManager.getStringPreference(Constants.TOKEN,Constants.DEFVALUE);        }        if(tag.equals(Constants.CHANGEPASSWORD)){            try {                int status = response.getInt("status");                if (status == 200) {                    String message = response.optString("message");                    Toast.makeText(this, message, Toast.LENGTH_LONG).show();                }            }catch (JSONException je) {                je.printStackTrace();            }        }    }    @Override    public void onError(VolleyError error, String message, String tag) {    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.menu_main, menu);        View view = menu.findItem(R.id.action_favorite).getActionView();       /* BadgeView badge = new BadgeView(this, view);        badge.setText("8");        badge.setBadgeBackgroundColor(Color.parseColor("#FFFFFF"));*/        // Associate searchable configuration with the SearchView        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {            SearchManager searchManager =                    (SearchManager) getSystemService(Context.SEARCH_SERVICE);            SearchView searchView =                    (SearchView) menu.findItem(R.id.search).getActionView();            searchView.setSearchableInfo(                    searchManager.getSearchableInfo(getComponentName()));            searchView.setIconifiedByDefault(false);        }        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.action_favorite:                // User chose the "Favorite" action, mark the current item                // as a favorite...                return true;            default:                // If we got here, the user's action was not recognized.                // Invoke the superclass to handle it.                return super.onOptionsItemSelected(item);        }    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event)    {        if ((keyCode == KeyEvent.KEYCODE_BACK))        {            finish();        }        return super.onKeyDown(keyCode, event);    }}